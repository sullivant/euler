#Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
#The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
#It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their 
#difference, 70 − 22 = 48, is not pentagonal.
#
#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and 
#difference are pentagonal and D = |Pk − Pj| is minimised; what is 
#the value of D?

require_relative('euler')

# I really don't want to brute force this.  There must be a relationship
# between the distance between two of the Pn and Pn+x other than it being a 
# number divisible by 3.

def makePentagonal(n)
	return (n*((3*n)-1))/2
end

pentNbrs = []
(1..10000).each do |n|
	pentNbrs << makePentagonal(n)
end

pentNbrs.each do |pj|
	pentNbrs.delete(pj)
	pentNbrs.each do |pk|
		next unless (pj+pk).isPentagonal?
		next unless (pj-pk).abs.isPentagonal?
		puts "#{pj}:#{pk}\ts:#{pj+pk}\td:#{(pj-pk).abs}"
	end
end

